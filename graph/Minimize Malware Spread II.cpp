/*
https://leetcode.com/problems/minimize-malware-spread-ii/

*/
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        unordered_map<int,vector<int>> m;
        for(int i:initial){
            unordered_set<int> visited(initial.begin(),initial.end());
            queue<int> q;
            q.push(i);
            while(!q.empty()){
                int cur=q.front();q.pop();
                for(int j=0;j<graph[cur].size();j++){
                    if(graph[cur][j]==1){
                        if(!visited.count(j)){
                            visited.insert(j);
                            q.push(j);
                            m[j].push_back(i);
                        }
                    }
                }
            }
        }
        vector<int> res(graph.size(),0);
        for(auto& it:m){
            if(it.second.size()==1) res[it.second[0]]++;
        }
        int mmax=0,removed=-1;
        for(int i=0;i<res.size();i++){
            if(res[i]>mmax){
                mmax=res[i];
                removed=i;
            }
        }
        sort(initial.begin(),initial.end());
        return removed==-1?initial[0]:removed;
    }
};
