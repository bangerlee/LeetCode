/*
https://leetcode.com/problems/minimize-malware-spread/

*/
class Solution {
private:
    vector<int> parents;
    int find(int x){
        if(x!=parents[x]) parents[x]=find(parents[x]);
        return parents[x];
    }
    void uni(int x,int y){
        parents[find(x)]=find(y);
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        for(int i=0;i<n;i++) parents.push_back(i);
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(graph[i][j]) uni(i,j);
            }
        }
        vector<int> area(n,0),malware(n,0);
        for(int i=0;i<n;i++) area[find(i)]++;
        for(auto i:initial) malware[find(i)]++;
        vector<int> res={1,0};
        for(int i:initial){
            res=min(res,{(malware[find(i)]==1)*(-area[find(i)]),i});
        }
        return res[1];
    }
};
